./esbmc-wrapper.py -p ../sv-benchmarks/c/properties/unreach-call.prp -s kinduction --arch 32 ../sv-benchmarks/c/product-lines/elevator_spec3_product29.cil.c


--------------------------------------------------------------------------------


Verifying with ESBMC
Command: ./esbmc --no-div-by-zero-check --force-malloc-success --state-hashing --no-align-check --k-step 2 --floatbv --unlimited-k-steps ../sv-benchmarks/c/product-lines/elevator_spec3_product29.cil.c --32 --witness-output elevator_spec3_product29.cil.c.graphml --no-pointer-check --no-bounds-check --interval-analysis --k-induction --max-inductive-step 3 
ESBMC version 6.8.0 64-bit x86_64 linux
Target: 32-bit little-endian x86_64-unknown-linux with esbmc libc
file ../sv-benchmarks/c/product-lines/elevator_spec3_product29.cil.c: Parsing
Converting
Generating GOTO Program
GOTO program creation time: 0.197s
GOTO program processing time: 0.420s
*** Checking base case, k = 1
Starting Bounded Model Checking
Not unwinding 
Symex completed in: 0.030s (393 assignments)
Slicing time: 0.000s (removed 391 assignments)
Generated 0 VCC(s), 0 remaining after simplification (2 assignments)
BMC program time: 0.030s
No bug has been found in the base case
*** Checking forward condition, k = 1
Starting Bounded Model Checking
Not unwinding 
Symex completed in: 0.028s (393 assignments)
Slicing time: 0.000s (removed 391 assignments)
Generated 1 VCC(s), 1 remaining after simplification (2 assignments)
No solver specified; defaulting to Boolector
Encoding remaining VCC(s) using bit-vector/floating-point arithmetic
Encoding to solver time: 0.000s
Solving with solver Boolector 3.2.1
Encoding to solver time: 0.000s
Runtime decision procedure: 0.000s
The forward condition is unable to prove the property
*** Checking base case, k = 3
Starting Bounded Model Checking
Unwinding loop 6  iteration  1   file elevator_spec3_product29.cil.c line 1685 function cleanup
Unwinding loop 6  iteration  2   file elevator_spec3_product29.cil.c line 1685 function cleanup
Not unwinding 
Symex completed in: 0.044s (567 assignments)
Slicing time: 0.001s (removed 565 assignments)
Generated 0 VCC(s), 0 remaining after simplification (2 assignments)
BMC program time: 0.045s
No bug has been found in the base case
*** Checking forward condition, k = 3
Starting Bounded Model Checking
Unwinding loop 6  iteration  1   file elevator_spec3_product29.cil.c line 1685 function cleanup
Unwinding loop 6  iteration  2   file elevator_spec3_product29.cil.c line 1685 function cleanup
Not unwinding 
Symex completed in: 0.045s (567 assignments)
Slicing time: 0.000s (removed 565 assignments)
Generated 1 VCC(s), 1 remaining after simplification (2 assignments)
No solver specified; defaulting to Boolector
Encoding remaining VCC(s) using bit-vector/floating-point arithmetic
Encoding to solver time: 0.000s
Solving with solver Boolector 3.2.1
Encoding to solver time: 0.000s
Runtime decision procedure: 0.000s
The forward condition is unable to prove the property
*** Checking inductive step, k = 3
Starting Bounded Model Checking
Unwinding loop 6  iteration  1   file elevator_spec3_product29.cil.c line 1685 function cleanup
Unwinding loop 6  iteration  2   file elevator_spec3_product29.cil.c line 1685 function cleanup
Not unwinding 
Symex completed in: 1.773s (13472 assignments)
Slicing time: 0.131s (removed 5745 assignments)
Generated 2 VCC(s), 2 remaining after simplification (7727 assignments)
No solver specified; defaulting to Boolector
Encoding remaining VCC(s) using bit-vector/floating-point arithmetic
Encoding to solver time: 0.143s
Solving with solver Boolector 3.2.1
Encoding to solver time: 0.143s
Runtime decision procedure: 1.892s
BMC program time: 3.940s
Building successful trace

VERIFICATION SUCCESSFUL

Solution found by the inductive step (k = 3)

../sv-benchmarks/c/product-lines/elevator_spec3_product29.cil.c:3128:10: warning: format string is not a string literal (potentially insecure) [-Wformat-security]
  printf(__cil_tmp6);
         ^~~~~~~~~~
../sv-benchmarks/c/product-lines/elevator_spec3_product29.cil.c:3128:10: note: treat the string as an argument to avoid this
  printf(__cil_tmp6);
         ^
         "%s", 
../sv-benchmarks/c/product-lines/elevator_spec3_product29.cil.c:3133:12: warning: format string is not a string literal (potentially insecure) [-Wformat-security]
    printf(__cil_tmp7);
           ^~~~~~~~~~
../sv-benchmarks/c/product-lines/elevator_spec3_product29.cil.c:3133:12: note: treat the string as an argument to avoid this
    printf(__cil_tmp7);
           ^
           "%s", 
../sv-benchmarks/c/product-lines/elevator_spec3_product29.cil.c:3138:12: warning: format string is not a string literal (potentially insecure) [-Wformat-security]
    printf(__cil_tmp8);
           ^~~~~~~~~~
../sv-benchmarks/c/product-lines/elevator_spec3_product29.cil.c:3138:12: note: treat the string as an argument to avoid this
    printf(__cil_tmp8);
           ^
           "%s", 
../sv-benchmarks/c/product-lines/elevator_spec3_product29.cil.c:3143:10: warning: format string is not a string literal (potentially insecure) [-Wformat-security]
  printf(__cil_tmp9);
         ^~~~~~~~~~
../sv-benchmarks/c/product-lines/elevator_spec3_product29.cil.c:3143:10: note: treat the string as an argument to avoid this
  printf(__cil_tmp9);
         ^
         "%s", 
../sv-benchmarks/c/product-lines/elevator_spec3_product29.cil.c:3147:10: warning: format string is not a string literal (potentially insecure) [-Wformat-security]
  printf(__cil_tmp11);
         ^~~~~~~~~~~
../sv-benchmarks/c/product-lines/elevator_spec3_product29.cil.c:3147:10: note: treat the string as an argument to avoid this
  printf(__cil_tmp11);
         ^
         "%s", 
../sv-benchmarks/c/product-lines/elevator_spec3_product29.cil.c:3152:12: warning: format string is not a string literal (potentially insecure) [-Wformat-security]
    printf(__cil_tmp12);
           ^~~~~~~~~~~
../sv-benchmarks/c/product-lines/elevator_spec3_product29.cil.c:3152:12: note: treat the string as an argument to avoid this
    printf(__cil_tmp12);
           ^
           "%s", 
../sv-benchmarks/c/product-lines/elevator_spec3_product29.cil.c:3157:12: warning: format string is not a string literal (potentially insecure) [-Wformat-security]
    printf(__cil_tmp13);
           ^~~~~~~~~~~
../sv-benchmarks/c/product-lines/elevator_spec3_product29.cil.c:3157:12: note: treat the string as an argument to avoid this
    printf(__cil_tmp13);
           ^
           "%s", 
../sv-benchmarks/c/product-lines/elevator_spec3_product29.cil.c:3162:10: warning: format string is not a string literal (potentially insecure) [-Wformat-security]
  printf(__cil_tmp14);
         ^~~~~~~~~~~
../sv-benchmarks/c/product-lines/elevator_spec3_product29.cil.c:3162:10: note: treat the string as an argument to avoid this
  printf(__cil_tmp14);
         ^
         "%s", 
../sv-benchmarks/c/product-lines/elevator_spec3_product29.cil.c:3206:10: warning: format string is not a string literal (potentially insecure) [-Wformat-security]
  printf(__cil_tmp20);
         ^~~~~~~~~~~
../sv-benchmarks/c/product-lines/elevator_spec3_product29.cil.c:3206:10: note: treat the string as an argument to avoid this
  printf(__cil_tmp20);
         ^
         "%s", 
../sv-benchmarks/c/product-lines/elevator_spec3_product29.cil.c:3263:10: warning: format string is not a string literal (potentially insecure) [-Wformat-security]
  printf(__cil_tmp26);
         ^~~~~~~~~~~
../sv-benchmarks/c/product-lines/elevator_spec3_product29.cil.c:3263:10: note: treat the string as an argument to avoid this
  printf(__cil_tmp26);
         ^
         "%s", 

TRUE
