./esbmc-wrapper.py -p ../sv-benchmarks/c/properties/unreach-call.prp -s kinduction --arch 32 ../sv-benchmarks/c/float-newlib/double_req_bl_1252b.c


--------------------------------------------------------------------------------


Verifying with ESBMC
Command: ./esbmc --no-div-by-zero-check --force-malloc-success --state-hashing --no-align-check --k-step 2 --floatbv --unlimited-k-steps ../sv-benchmarks/c/float-newlib/double_req_bl_1252b.c --32 --witness-output double_req_bl_1252b.c.graphml --no-pointer-check --no-bounds-check --interval-analysis --k-induction --max-inductive-step 3 
ESBMC version 6.8.0 64-bit x86_64 linux
Target: 32-bit little-endian x86_64-unknown-linux with esbmc libc
file ../sv-benchmarks/c/float-newlib/double_req_bl_1252b.c: Parsing
Converting
Generating GOTO Program
GOTO program creation time: 0.088s
GOTO program processing time: 0.001s
*** Checking base case, k = 1
Starting Bounded Model Checking
Symex completed in: 0.002s (69 assignments)
Slicing time: 0.000s (removed 63 assignments)
Generated 1 VCC(s), 1 remaining after simplification (6 assignments)
No solver specified; defaulting to Boolector
Encoding remaining VCC(s) using bit-vector/floating-point arithmetic
Encoding to solver time: 0.000s
Solving with solver Boolector 3.2.1
Encoding to solver time: 0.000s
Runtime decision procedure: 0.000s
Building error trace

Counterexample:

State 1 file double_req_bl_1252b.c line 67 function __signbit_double thread 0
----------------------------------------------------
  gh_u.value = { .value=-0.000000 }

State 2 file double_req_bl_1252b.c line 68 function __signbit_double thread 0
----------------------------------------------------
  msw = gh_u.parts.msw

State 3 file double_req_bl_1252b.c line 3 function reach_error thread 0
----------------------------------------------------
Violated property:
  file double_req_bl_1252b.c line 3 function reach_error
  assertion 0
  0


VERIFICATION FAILED

Bug found (k = 1)


FALSE_REACH
