./esbmc-wrapper.py -p ../sv-benchmarks/c/properties/termination.prp -s kinduction --arch 32 ../sv-benchmarks/c/product-lines/elevator_spec1_product21.cil.c


--------------------------------------------------------------------------------


Verifying with ESBMC
Command: ./esbmc --no-div-by-zero-check --force-malloc-success --state-hashing --add-symex-value-sets --no-align-check --k-step 5 --floatbv --unlimited-k-steps ../sv-benchmarks/c/product-lines/elevator_spec1_product21.cil.c --32 --witness-output elevator_spec1_product21.cil.c.graphml --no-pointer-check --no-bounds-check --no-assertions --termination --max-inductive-step 3 
ESBMC version 6.8.0 64-bit x86_64 linux
Target: 32-bit little-endian x86_64-unknown-linux with esbmc libc
file ../sv-benchmarks/c/product-lines/elevator_spec1_product21.cil.c: Parsing
Converting
Generating GOTO Program
GOTO program creation time: 0.319s
GOTO program processing time: 0.024s
*** Checking forward condition, k = 1
Starting Bounded Model Checking
Not unwinding 
Symex completed in: 0.068s (557 assignments)
Slicing time: 0.001s (removed 555 assignments)
Generated 1 VCC(s), 1 remaining after simplification (2 assignments)
No solver specified; defaulting to Boolector
Encoding remaining VCC(s) using bit-vector/floating-point arithmetic
Encoding to solver time: 0.000s
Solving with solver Boolector 3.2.2
Encoding to solver time: 0.000s
Runtime decision procedure: 0.001s
The forward condition is unable to prove the property
*** Checking forward condition, k = 6
Starting Bounded Model Checking
Unwinding loop 4  iteration  1   file elevator_spec1_product21.cil.c line 1714 function cleanup
Unwinding loop 4  iteration  2   file elevator_spec1_product21.cil.c line 1714 function cleanup
Unwinding loop 4  iteration  3   file elevator_spec1_product21.cil.c line 1714 function cleanup
Unwinding loop 4  iteration  4   file elevator_spec1_product21.cil.c line 1714 function cleanup
Unwinding loop 4  iteration  5   file elevator_spec1_product21.cil.c line 1714 function cleanup
Not unwinding 
Symex completed in: 0.273s (1797 assignments)
Slicing time: 0.003s (removed 1795 assignments)
Generated 1 VCC(s), 1 remaining after simplification (2 assignments)
No solver specified; defaulting to Boolector
Encoding remaining VCC(s) using bit-vector/floating-point arithmetic
Encoding to solver time: 0.001s
Solving with solver Boolector 3.2.2
Encoding to solver time: 0.001s
Runtime decision procedure: 0.000s
The forward condition is unable to prove the property
*** Checking forward condition, k = 11
Starting Bounded Model Checking
Unwinding loop 4  iteration  1   file elevator_spec1_product21.cil.c line 1714 function cleanup
Unwinding loop 4  iteration  2   file elevator_spec1_product21.cil.c line 1714 function cleanup
Unwinding loop 4  iteration  3   file elevator_spec1_product21.cil.c line 1714 function cleanup
Unwinding loop 4  iteration  4   file elevator_spec1_product21.cil.c line 1714 function cleanup
Unwinding loop 4  iteration  5   file elevator_spec1_product21.cil.c line 1714 function cleanup
Unwinding loop 4  iteration  6   file elevator_spec1_product21.cil.c line 1714 function cleanup
Unwinding loop 4  iteration  7   file elevator_spec1_product21.cil.c line 1714 function cleanup
Unwinding loop 4  iteration  8   file elevator_spec1_product21.cil.c line 1714 function cleanup
Symex completed in: 0.363s (2348 assignments)
Slicing time: 0.004s (removed 2347 assignments)
Generated 0 VCC(s), 0 remaining after simplification (1 assignments)
BMC program time: 0.367s
Building successful trace

VERIFICATION SUCCESSFUL

Solution found by the forward condition; all states are reachable (k = 11

../sv-benchmarks/c/product-lines/elevator_spec1_product21.cil.c:1268:10: warning: format string is not a string literal (potentially insecure) [-Wformat-security]
  printf(__cil_tmp6);
         ^~~~~~~~~~
../sv-benchmarks/c/product-lines/elevator_spec1_product21.cil.c:1268:10: note: treat the string as an argument to avoid this
  printf(__cil_tmp6);
         ^
         "%s", 
../sv-benchmarks/c/product-lines/elevator_spec1_product21.cil.c:1273:12: warning: format string is not a string literal (potentially insecure) [-Wformat-security]
    printf(__cil_tmp7);
           ^~~~~~~~~~
../sv-benchmarks/c/product-lines/elevator_spec1_product21.cil.c:1273:12: note: treat the string as an argument to avoid this
    printf(__cil_tmp7);
           ^
           "%s", 
../sv-benchmarks/c/product-lines/elevator_spec1_product21.cil.c:1278:12: warning: format string is not a string literal (potentially insecure) [-Wformat-security]
    printf(__cil_tmp8);
           ^~~~~~~~~~
../sv-benchmarks/c/product-lines/elevator_spec1_product21.cil.c:1278:12: note: treat the string as an argument to avoid this
    printf(__cil_tmp8);
           ^
           "%s", 
../sv-benchmarks/c/product-lines/elevator_spec1_product21.cil.c:1283:10: warning: format string is not a string literal (potentially insecure) [-Wformat-security]
  printf(__cil_tmp9);
         ^~~~~~~~~~
../sv-benchmarks/c/product-lines/elevator_spec1_product21.cil.c:1283:10: note: treat the string as an argument to avoid this
  printf(__cil_tmp9);
         ^
         "%s", 
../sv-benchmarks/c/product-lines/elevator_spec1_product21.cil.c:1287:10: warning: format string is not a string literal (potentially insecure) [-Wformat-security]
  printf(__cil_tmp11);
         ^~~~~~~~~~~
../sv-benchmarks/c/product-lines/elevator_spec1_product21.cil.c:1287:10: note: treat the string as an argument to avoid this
  printf(__cil_tmp11);
         ^
         "%s", 
../sv-benchmarks/c/product-lines/elevator_spec1_product21.cil.c:1292:12: warning: format string is not a string literal (potentially insecure) [-Wformat-security]
    printf(__cil_tmp12);
           ^~~~~~~~~~~
../sv-benchmarks/c/product-lines/elevator_spec1_product21.cil.c:1292:12: note: treat the string as an argument to avoid this
    printf(__cil_tmp12);
           ^
           "%s", 
../sv-benchmarks/c/product-lines/elevator_spec1_product21.cil.c:1297:12: warning: format string is not a string literal (potentially insecure) [-Wformat-security]
    printf(__cil_tmp13);
           ^~~~~~~~~~~
../sv-benchmarks/c/product-lines/elevator_spec1_product21.cil.c:1297:12: note: treat the string as an argument to avoid this
    printf(__cil_tmp13);
           ^
           "%s", 
../sv-benchmarks/c/product-lines/elevator_spec1_product21.cil.c:1302:10: warning: format string is not a string literal (potentially insecure) [-Wformat-security]
  printf(__cil_tmp14);
         ^~~~~~~~~~~
../sv-benchmarks/c/product-lines/elevator_spec1_product21.cil.c:1302:10: note: treat the string as an argument to avoid this
  printf(__cil_tmp14);
         ^
         "%s", 
../sv-benchmarks/c/product-lines/elevator_spec1_product21.cil.c:1346:10: warning: format string is not a string literal (potentially insecure) [-Wformat-security]
  printf(__cil_tmp20);
         ^~~~~~~~~~~
../sv-benchmarks/c/product-lines/elevator_spec1_product21.cil.c:1346:10: note: treat the string as an argument to avoid this
  printf(__cil_tmp20);
         ^
         "%s", 
../sv-benchmarks/c/product-lines/elevator_spec1_product21.cil.c:1403:10: warning: format string is not a string literal (potentially insecure) [-Wformat-security]
  printf(__cil_tmp26);
         ^~~~~~~~~~~
../sv-benchmarks/c/product-lines/elevator_spec1_product21.cil.c:1403:10: note: treat the string as an argument to avoid this
  printf(__cil_tmp26);
         ^
         "%s", 

TRUE
